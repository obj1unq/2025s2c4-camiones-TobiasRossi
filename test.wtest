import camion.*
import cosas.*

describe "Gestión de Carga del Camión" {

    test "Cargar y Descargar" {
        assert.that(camion.cosasCargadas().isEmpty()) 
    
        camion.cargar(bumblebee)

        assert.that(camion.cosasCargadas().contains(bumblebee))

        camion.cargar(knightRider)

        assert.that(camion.cosasCargadas().contains(bumblebee))
        assert.that(camion.cosasCargadas().contains(knightRider))
        assert.equals(2, camion.cosasCargadas().size())

        camion.descargar(bumblebee)

        assert.notThat(camion.cosasCargadas().contains(bumblebee))
        assert.that(camion.cosasCargadas().contains(knightRider))
        assert.equals(1, camion.cosasCargadas().size())

        assert.throwsExceptionWithMessage("La cosa ya estaba cargada", {
            camion.cargar(knightRider)
        })

        assert.throwsExceptionWithMessage("La cosa no estaba cargada", {
            camion.descargar(bumblebee)
        })

        camion.descargar(knightRider)
    }

    test "Peso Par" {
        assert.that(camion.cosasCargadas().isEmpty()) 
    
        camion.cargar(bumblebee)

        arenaAGranel.pesoActual(50)
        camion.cargar(arenaAGranel)
        assert.that(camion.pesoTotalPar()) 

        camion.descargar(arenaAGranel)

        arenaAGranel.pesoActual(51)
        camion.cargar(arenaAGranel)
        assert.notThat(camion.pesoTotalPar()) 

        camion.descargar(bumblebee)
        camion.descargar(arenaAGranel)
    }

    test "Cosa Cargada Peso" {
        assert.that(camion.cosasCargadas().isEmpty()) 

        camion.cargar(bumblebee)
        arenaAGranel.pesoActual(50)
        camion.cargar(arenaAGranel)

        assert.that(camion.hayCosaCargadaPesa(50))
        assert.that(camion.hayCosaCargadaPesa(800))
        assert.notThat(camion.hayCosaCargadaPesa(500))
        
        camion.descargar(bumblebee)
        camion.descargar(arenaAGranel)
    }

    test "Peso Total y Exceso" {
        assert.that(camion.cosasCargadas().isEmpty())

        camion.cargar(bumblebee)
        paqueteDeLadrillos.cantidadDeLadrillos(300)
        camion.cargar(paqueteDeLadrillos)

        assert.that(camion.pesoTotalDelCamion() == 2400)
        assert.notThat(camion.excesoDePeso())

        camion.descargar(paqueteDeLadrillos)
        paqueteDeLadrillos.cantidadDeLadrillos(400)
        camion.cargar(paqueteDeLadrillos)

        assert.that(camion.pesoTotalDelCamion() == 2600)
        assert.that(camion.excesoDePeso())

        camion.descargar(bumblebee)
        camion.descargar(paqueteDeLadrillos)
    }

    test "Peligrosidad" {
        assert.that(camion.cosasCargadas().isEmpty())

        camion.cargar(bumblebee)
        bateriaAntiaerea.tieneMisiles(false)
        camion.cargar(bateriaAntiaerea)
        camion.cargar(residuosRadioactivos)

        assert.that(camion.hayCosaCargadaConPeligrosidad(0))
        assert.that(camion.hayCosaCargadaConPeligrosidad(15))
        assert.that(camion.hayCosaCargadaConPeligrosidad(200))
        assert.notThat(camion.hayCosaCargadaConPeligrosidad(30))

        camion.descargar(bumblebee)
        bumblebee.estaTransformadoEnAuto(false)
        camion.cargar(bumblebee)

        assert.that(camion.hayCosaCargadaConPeligrosidad(30))

        camion.descargar(bateriaAntiaerea)
        bateriaAntiaerea.tieneMisiles(true)
        camion.cargar(bateriaAntiaerea)

        assert.that(camion.hayCosaCargadaConPeligrosidad(100))

        camion.descargar(bumblebee)
        camion.descargar(bateriaAntiaerea)
        camion.descargar(residuosRadioactivos)
    }

    test "Comparacion Peligrosidad" {
        assert.that(camion.cosasCargadas().isEmpty())

        camion.cargar(knightRider)
        bateriaAntiaerea.tieneMisiles(true)
        camion.cargar(bateriaAntiaerea)

        assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(15))
        assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueOtra(bumblebee))
        assert.equals(#{knightRider,bateriaAntiaerea}, camion.cosasMasPeligrosasQue(2))
        assert.equals(#{knightRider,bateriaAntiaerea}, camion.cosasMasPeligrosasQueOtra(paqueteDeLadrillos))
        assert.that(camion.cosasMasPeligrosasQue(200).isEmpty())
        assert.that(camion.cosasMasPeligrosasQueOtra(residuosRadioactivos).isEmpty())
    
        camion.descargar(knightRider)
        camion.descargar(bateriaAntiaerea)
    }

    test "Es Apto para Ruta nivel 20" {
        assert.that(camion.cosasCargadas().isEmpty())

        bumblebee.estaTransformadoEnAuto(true)
        camion.cargar(bumblebee)
        paqueteDeLadrillos.cantidadDeLadrillos(300)
        camion.cargar(paqueteDeLadrillos)

        assert.that(camion.esAptoParaRuta(20))

        camion.descargar(paqueteDeLadrillos)
        paqueteDeLadrillos.cantidadDeLadrillos(400)
        camion.cargar(paqueteDeLadrillos)

        assert.notThat(camion.esAptoParaRuta(20))

        camion.descargar(paqueteDeLadrillos)
        paqueteDeLadrillos.cantidadDeLadrillos(300)
        camion.cargar(paqueteDeLadrillos)
        camion.descargar(bumblebee)
        bumblebee.estaTransformadoEnAuto(false)
        camion.cargar(bumblebee)
        
        assert.notThat(camion.esAptoParaRuta(20))
    }

    test "Contenedor Portuario y Embalaje de Seguridad" {
        assert.equals(100, contenedorPortuario.peso())
        assert.equals(0, contenedorPortuario.nivelPeligrosidad())

        contenedorPortuario.cargar(knightRider)
        arenaAGranel.pesoActual(50)
        contenedorPortuario.cargar(arenaAGranel)

        assert.equals(650, contenedorPortuario.peso())
        assert.equals(10, contenedorPortuario.nivelPeligrosidad())

        contenedorPortuario.descargar(knightRider)
        contenedorPortuario.descargar(arenaAGranel)

        embalajeDeSeguridad.envolver(knightRider)

        assert.equals(500, embalajeDeSeguridad.peso())
        assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())

        embalajeDeSeguridad.desenvolver(knightRider)
        bumblebee.estaTransformadoEnAuto(true)
        embalajeDeSeguridad.envolver(bumblebee)

        assert.equals(800, embalajeDeSeguridad.peso())
        assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())

        embalajeDeSeguridad.desenvolver(bumblebee)
    }
    
    test "Cosas que Pesan Entre Dos Numeros" {
        assert.that(camion.cosasCargadas().isEmpty())

        camion.cargar(bumblebee)
        paqueteDeLadrillos.cantidadDeLadrillos(300)
        camion.cargar(paqueteDeLadrillos)

        assert.that(camion.hayAlgoCargadoQuePesaEntre(5,700))
        assert.that(camion.hayAlgoCargadoQuePesaEntre(5,1000))
        assert.notThat(camion.hayAlgoCargadoQuePesaEntre(900,1000))

        camion.descargar(bumblebee)
        camion.descargar(paqueteDeLadrillos)
    }

    test "Cosa Cargada mas Pesada" {
        assert.that(camion.cosasCargadas().isEmpty())

        camion.cargar(bumblebee)
        paqueteDeLadrillos.cantidadDeLadrillos(300)
        camion.cargar(paqueteDeLadrillos)

        assert.equals(bumblebee, camion.cosaCargadaMasPesada())

        camion.descargar(bumblebee)
        camion.descargar(paqueteDeLadrillos)

        assert.throwsExceptionWithMessage("No se puede calcular el elemento mas pesado porque el camion está vacio", {camion.cosaCargadaMasPesada()})
    }

    test "Peso de Cosas Cargadas" {
        assert.that(camion.cosasCargadas().isEmpty())

        camion.cargar(bumblebee)
        paqueteDeLadrillos.cantidadDeLadrillos(300)
        camion.cargar(paqueteDeLadrillos)

        assert.equals([800,600], camion.listaDePesosDeCosasCargadas())
    }

    test "Bultos Caso 1" {
        contenedorPortuario.cargar(knightRider)
        contenedorPortuario.cargar(bumblebee)
        embalajeDeSeguridad.envolver(residuosRadioactivos)
        paqueteDeLadrillos.cantidadDeLadrillos(50)
        bateriaAntiaerea.tieneMisiles(false)

        assert.that(camion.cosasCargadas().isEmpty())

        camion.cargar(contenedorPortuario)
        camion.cargar(embalajeDeSeguridad)
        camion.cargar(arenaAGranel)
        camion.cargar(paqueteDeLadrillos)
        camion.cargar(bateriaAntiaerea)

        assert.equals(9, camion.cosasCargadas().map({cosa => cosa.bulto()}).sum())

        camion.descargar(contenedorPortuario)
        camion.descargar(embalajeDeSeguridad)
        camion.descargar(arenaAGranel)
        camion.descargar(paqueteDeLadrillos)
        camion.descargar(bateriaAntiaerea)
    }

    test "Bultos Caso 2" {
        paqueteDeLadrillos.cantidadDeLadrillos(150)
        bateriaAntiaerea.tieneMisiles(true)
        assert.that(contenedorPortuario.cosasDentro().isEmpty())

        assert.that(camion.cosasCargadas().isEmpty())

        camion.cargar(contenedorPortuario)
        camion.cargar(bateriaAntiaerea)
        camion.cargar(paqueteDeLadrillos)

        assert.equals(5, camion.cosasCargadas().map({cosa => cosa.bulto()}).sum())

        camion.descargar(contenedorPortuario)
        camion.descargar(bateriaAntiaerea)
        camion.descargar(paqueteDeLadrillos)
    }

    test "Bultos Caso 3" {
        paqueteDeLadrillos.cantidadDeLadrillos(350)

        assert.that(camion.cosasCargadas().isEmpty())
    
        camion.cargar(paqueteDeLadrillos)
        camion.cargar(arenaAGranel)

        assert.equals(4, camion.cosasCargadas().map({cosa => cosa.bulto()}).sum())

        camion.descargar(paqueteDeLadrillos)
        camion.descargar(arenaAGranel)
    }

    test "Accidente Caso 1" {
        assert.that(camion.cosasCargadas().isEmpty())

        contenedorPortuario.cargar(knightRider)
        bumblebee.estaTransformadoEnAuto(true)
        contenedorPortuario.cargar(bumblebee)

        camion.cargar(contenedorPortuario)

        residuosRadioactivos.pesoActual(30)
        embalajeDeSeguridad.envolver(residuosRadioactivos)

        camion.cargar(embalajeDeSeguridad)

        arenaAGranel.pesoActual(50)
        camion.cargar(arenaAGranel)

        paqueteDeLadrillos.cantidadDeLadrillos(100)
        camion.cargar(paqueteDeLadrillos)

        bateriaAntiaerea.tieneMisiles(true)
        camion.cargar(bateriaAntiaerea)

        camion.sufrirAccidente()

        assert.notThat(bumblebee.estaTransformadoEnAuto())
        assert.equals(30, residuosRadioactivos.peso())
        assert.equals(70, arenaAGranel.peso())
        assert.equals(88, paqueteDeLadrillos.cantidadDeLadrillos())
        assert.notThat(bateriaAntiaerea.tieneMisiles())

        contenedorPortuario.descargar(knightRider)
        contenedorPortuario.descargar(bumblebee)
        camion.descargar(contenedorPortuario)
        embalajeDeSeguridad.desenvolver(residuosRadioactivos)
        camion.descargar(embalajeDeSeguridad)
        camion.descargar(arenaAGranel)
        camion.descargar(paqueteDeLadrillos)
        camion.descargar(bateriaAntiaerea)

        assert.that(camion.cosasCargadas().isEmpty())
    }

    test "Accidente Caso 2" {
        assert.that(camion.cosasCargadas().isEmpty())

        bumblebee.estaTransformadoEnAuto(false)
        residuosRadioactivos.pesoActual(30)
        paqueteDeLadrillos.cantidadDeLadrillos(10)
        bateriaAntiaerea.tieneMisiles(false)

        camion.cargar(bumblebee)
        camion.cargar(residuosRadioactivos)
        camion.cargar(paqueteDeLadrillos)
        camion.cargar(bateriaAntiaerea)

        camion.sufrirAccidente()

        assert.that(bumblebee.estaTransformadoEnAuto())
        assert.equals(45, residuosRadioactivos.peso())
        assert.equals(0, paqueteDeLadrillos.cantidadDeLadrillos())
        assert.notThat(bateriaAntiaerea.tieneMisiles())

        camion.descargar(bumblebee)
        camion.descargar(residuosRadioactivos)
        camion.descargar(paqueteDeLadrillos)
        camion.descargar(bateriaAntiaerea)
    }
}

describe "Casos Almacenar" {
    test "Caso: ruta 9 exitoso" {
        assert.that(camion.cosasCargadas().isEmpty())
        assert.that(almacen.cosasGuardadas().isEmpty())

        almacen.dejarEnAlmacen(#{knightRider,residuosRadioactivos})

        bumblebee.estaTransformadoEnAuto(true)
        arenaAGranel.pesoActual(50)

        camion.cargar(bumblebee)
        camion.cargar(arenaAGranel)

        camion.transportar(almacen, ruta9)

        assert.that(camion.cosasCargadas().isEmpty())

        assert.equals(
            #{knightRider, residuosRadioactivos, bumblebee, arenaAGranel},almacen.cosasGuardadas().asSet())
    }
}
